/* El asterisco es un SELECTOR que se aplica a todo el documento. En este caso se usa  para eliminar formato que 
traiga el navegador por defecto y peude generar conflictos */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}





/* Desde root podemos crear "macros" de colores o formatos para luego reusar en varias partes
de nuestra págui */
:root {
  --primary: #3b4550;
  --primary-dark: #0a3d66;
  --primary-hover: #0d5ba8;
  --primary-light: #09f;
  --background: #06182a;
  --text-primary: #ffffff;
  --text-secondary: #cbd5e1;
  --text-muted: #94a3b8;
  --text-nav-selected: #567094;
  --border: rgba(255, 255, 255, 0.1);
  --card-bg: #1e293b;
  --shadow: rgba(0, 0, 0, 0.3);
  --input-bg: #1e293b;
  --hsla-example: hsla(210, 100%, 56%, 1);
}










@font-face {
  font-family: 'Inter Variable';
  font-style: normal;
  font-display: swap;
  font-weight: 100 900;
  src: url(https://cdn.jsdelivr.net/fontsource/fonts/inter:vf@latest/latin-wght-normal.woff2) format('woff2-variations');
  unicode-range: U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;
}


body {
  font-family: system-ui;
  background-color: var(--background);
  color: var(--text-primary);
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  line-height: 1.6;
}

/* Títulos principales */
h1 {
  font-size: 1.5rem;
  line-height: 1.2;
  text-wrap: balance;
  display: flex;
  align-items: center;
  gap: 0.5rem;

  svg {
    width: 2rem;
    height: 2rem;
    color: var(--primary-light);
  }
}

h1 + p {
  text-wrap: balance;
  margin-bottom: 2rem
}

/* Header */
header {
  border-bottom: 1px solid var(--border);
  background: var(--background);
  padding: .5rem 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 2rem;

  h2 {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-primary);
  }
}

/* Navegación del header a otras páginas */
nav {
  align-items: center;
  gap: 1rem;
  display: flex;

  a {
    text-decoration: none;
    color: var(--text-secondary);
    transition: color 0.2s;
    font-weight: 500;

    &:hover, &:focus{
      color: var(--primary);
      outline: none;
    }
    &.active {
      color: var(--text-nav-selected);
      font-weight: 800;
      pointer-events: none; /* Anula todos los eventos : hover, atctive, etc */
    }
  }
}
/*El orden de las pseudo-clases importa. Si pongo &:hover después de &:active no funcionará el &:active porque &:hover lo sobreescribe
La regla es  es love-hate (LVHA) porque el orden ideal es:
link (estado normal)-visited (enlace visitado)-hover-active

Hay otras pseudo-clases útiles como:
  - first-child, last-child, nth-child(numero) para orden de hijos
  - not(.algo) como negación
  - valid para validez de elementos como respuestas a formularios*/

/* Botones del Header */
header div a {
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  background-color: var(--primary-hover);
  color: var(--text-primary);
  display: inline-block;
  font-size: 0.875rem;
  font-weight: 700;
  text-decoration: none;
  /* El &: dentro de un selector es para indicar que es ese mismo selector
  Lo de abajo sería lo mismo que si pusiera fuera:
  header div a:hover, a:focus {... */
  &:hover, &:focus {
    background-color: var(--primary);
    outline: none;
  }
  /* TODO */
}

/* 
&:hover pseudo-clase que significa que el ratón está encima 
&:focus pseudo-clase que significa que el elemento tiene el foco 
*/

/* Hero */
main > section:nth-child(1) {
  height: 500px;
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  h1 {
    padding-top: 36px;
  }

  & > img {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -1;
    left: 0;
    right: 0;
    mask-image: linear-gradient(to bottom, rgba(16, 25, 34, 1) 5%, rgba(16, 25, 34, 0) 80%);
  }
}

/* Formulario de Búsqueda */
form {
  max-width: 42rem;
  width: 100%;
  margin: 0 auto;
  padding-inline: 1rem;
}

form > div {
  display: flex;
  align-items: center;
  background-color: var(--input-bg);
  border-radius: 0.5rem;
  box-shadow: 0 10px 15px -3px var(--shadow);
  padding: 0.5rem;
  gap: 0.5rem;
}

form span {
  padding-left: 0.75rem;
  color: var(--text-muted);
  display: flex;
  align-items: center;
  flex-shrink: 0;
}

form input[type="text"] {
  flex: 1;
  background: transparent;
  border: none;
  outline: none;
  color: var(--text-primary);
  padding: 0.75rem 0.5rem;
  font-size: 1rem;
  font-family: inherit;
}

form input[type="text"]::placeholder {
  color: #64748b;
}

button {
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  background-color: var(--primary);
  color: white;
  font-weight: 400;
  border: none;
  cursor: pointer;
  transition: all 0.2s;
  font-family: inherit;
  font-size: 1rem;
  white-space: nowrap;

  &:hover, /* pseudo-clase que significa que el ratón está encima */
  &:focus { /* pseudo-clase que significa que el elemento tiene el foco. Por si lo slectionamos con el teclado u otra menra etc */
    background-color: var(--primary-hover);
    outline: 2px solid white;
    outline-offset: 2px;
  }

  &:active { /* pseudo-clase que significa que está selecionado/clicado */
    transform: scale(0.90)
  }

  &:disabled {
    opacity: .5;
    pointer-events: none; /* Anula todos los eventos : hover, atctive, etc */
  }
}

/* Features Section */
main > section:nth-child(2) {
  padding-inline: 1rem;
  background-color: var(--background);
  padding-top: 2rem;

  & > header {
    gap: 2px;
    flex-direction: column;

    h2 {
      margin-bottom: 0;
    }

    p {
      opacity: .75;
    }
  }

  & > div {
    max-width: 1280px;
    margin: 0 auto;
  }
}

main > section:nth-child(2) h2 {
  font-size: 1.875rem;
  font-weight: 700;
  color: var(--text-primary);
  margin-bottom: 1rem;
}

main > section:nth-child(2) > div > div:first-child > p {
  font-size: 1.125rem;
  color: var(--text-muted);
  max-width: 42rem;
  margin: 0 auto;
}

/* Grid de Features
el operador > indica hijo directo. Lo de abajo se traduce como:
el footer de la segunda sección (hija) del main */
main > section:nth-child(2) footer {
  display: grid;
  /* Tres columnas de igual tamaño
   fr es facciones del total. Puede usarse otros valores como px, %, rem, etc
   
  grid-template-columns: 1fr 1fr 1fr;
  
  El problema de la línea de arriba es que en pantallas pequeñas se vería mal
  La línea de abajo lo resuelve aplicando "responsive design".

  Con @media se hace una query para diferentes tipos de medios
  En el caso de abajo aplicamos las 3 columnas pero solo cuando haya una pantalla de más de 640px 
  @media (width >=640px) {
  main > section:nth-child(2) footer {
    grid-template-columns: 1fr 1fr 1fr;
    gap:  20px;
    }
  }
    Finalmente se puede hacer que el número de columnas sea automático según el tamaño
    de la pantalla con la función repeat y minmax.
    El código de abajo crea una columna nueva si puede tener como mínimo 220px de tamaño.
    auto-fit hace que se generen tantas columans como sea posible adaptandose al tamaño de la pantalla.
    minmax hace que la columna tenga un mínimo y máximo tamaño. El caso de fr será un máximo flexible. a repartir entre las columnas.
*/
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 16px;
}


/* Feature Cards */
/* article {
  background-color: var(--card-bg);
  padding: 2rem;
  margin-bottom: 16px;
  border-radius: 0.5rem;                   
  box-shadow: 0px 1px 3px 0 var(--shadow); 

  svg {
    color: var(--primary-light);          
    background: rgba(0, 153, 255, 0.3);  
    border-radius: 9999px;               
    width: 64px;                         
    height: 64px;                        
    padding: 16px;                       
  }

  h3 {
    font-weight: 500;
  }

  p {
    color: var(--text-muted);
  }
} */

/* Footer */
footer {
  background-color: var(--background);
  border-top: 1px solid var(--border);
  text-align: center;
  padding: 16px;

  small {
    color: var(--text-muted);
    font-size: 0.875rem;
  }
}

/* El problema de crear un article general es que se aplicará a todos
Hay diferentes tipos de medidas:
  - XXpx Son píxeles y es absolute
  - XXrem es un valor relativo a la fuente raiz (multiplicar por el tamaño de la fuente). 
  - xx% Porcentaje de algo. Sirve para cosas como border-radius*/
main > section:nth-child(2) footer article {
  background-color: var(--card-bg);
  padding: 2rem; /* 16*2 = 32px El padding es el relleno vacio dentro del "objeto". "De dentro hacia afuera" */
  margin-bottom: 16px; /* Margen es el espacio que entre objetos (articles en este caso). Aquí es haca abajo */
  border-radius: 1rem; /* Bordes redondeados. A mayor valor más redondeo. Se puede poner valor para cada borde  */
/* Sombra. Valores (pueden negativos): desplazamiento horizontal, desplazamiento vertical, difuminado, extensión(tamaño) y color */
  box-shadow: 0px 1px 3px 0px rgba(0, 4, 10, 0.5); 
  /* meter el svg debajo es para especificar que son los de este artice
  Sería lo mismo si tuviera fuera main footer article svg */
  svg {
    color: var(--primary-light);
    background: rgba(0, 153, 255, .3);
    width: 64px;
    height: 64px;
    border-radius: 100%; /* 100% hace que sea un círculo */
    padding: 16px;
  }

  p {
    color: var(--text-muted);
  }

  h3 {
    font-weight: 500; /* Grosor de la fuente. Con valor alto negrita */
  }
}

/* Clase Jobs Search. Se pueden anidar selectores dentro de una clase
Además si no se concreta la clase puede aplicarse a elementos diferentes que tengan todos la misma clase */
.jobs-search {
  margin: 0;
  padding: 0;
/* En CSS los valores se sobreescribren teniendo prioridadlo específico, y al mismo nivel lo que esté más abajor.
  El !important hace que se le de máxima prioridada ese cambio de propiedad. NO ES RECOMENDABLE Y MEJOR EVITAR */
  height: auto !important;

  h1 { /* Solo afecta a los h1 DENTRO de .jobs-search */
    font-size: 2.5rem;
    margin-bottom: .25rem;
  }

  p { /* Solo afecta a los p DENTRO de .jobs-search */
    font-size: 1.125rem;
    color: var(--text-muted);
    margin-bottom: 1.5rem;
  }

  /* También se pueden anidar clases */
  .search-bar {
    background: var(--input-bg);
    padding: .25rem .5rem;
  }

  .search-filters {
    display: flex;
    flex-wrap: wrap;
    margin-top: .5rem;
  }

  form {
    width: 100%;
    max-width: 1280px;
  }

  form div {
    background: none;
    box-shadow: none;
    padding: 0;
  }
}

.jobs-listings {
  border: 1px solid rgba(255, 255, 255, .3);
  border-radius: 1rem;

  article {
    background: none;
    box-shadow: none;
    border-radius: 0;
    border-bottom: 1px solid rgba(255, 255, 255, .3);
    margin: 0;

    display: flex; /* Convierte el layout en  un Flexbox para que el botón esté a la derecha*/
    align-items: start;
    gap: 1rem;

    small {
      font-size: .875rem;
      opacity: .75;
    }

    p {
      margin-top: 0.5rem
    }

    &:last-child { /* Sobreescribimos para que el ultimo hijo no tenga borde
       para no estar duplicado con el de la caja/artículo en el que está*/
      border-bottom: none;
    }
    &.job-listing-card {
      padding: 1rem;
    }
  }
}

.pagination {
  display: flex; /* Convierte el layout en caja flexible. Los elementos se ponen en fila */
  justify-content: center;
  gap: 0.5rem;
  margin-block: 2rem; /* Margen inteligente de arriba y abajo. Se adapta a otros tipos de escritura
  el contrario sería margin-inline para izquierda y derecha. Tambíen sirven existe padding-block y padding-inline*/

  a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    text-decoration: none; /* Quita el subrayado típico de un enlace*/
    color: var(--text-muted);
    border-radius: 0.375rem;
    transition: all .3s; /* Transición suave para todos los cambios de propiedad como un hover */

    &:hover, &:focus {
      background-color: #fff;
    }

    &:active {
      transform: scale(0.90);
    }

    &.is-active {
      background-color: var(--primary-light);
      color: white;
      pointer-events: none;
    }
  }
}

.button-apply-job {
  background: #09f;

  &.is-applied {
    background: #4caf50;
    pointer-events: none;
  }
}